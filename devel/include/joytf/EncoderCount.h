// Generated by gencpp from file joytf/EncoderCount.msg
// DO NOT EDIT!


#ifndef JOYTF_MESSAGE_ENCODERCOUNT_H
#define JOYTF_MESSAGE_ENCODERCOUNT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace joytf
{
template <class ContainerAllocator>
struct EncoderCount_
{
  typedef EncoderCount_<ContainerAllocator> Type;

  EncoderCount_()
    : Left_tick_count(0.0)
    , right_tick_count(0.0)  {
    }
  EncoderCount_(const ContainerAllocator& _alloc)
    : Left_tick_count(0.0)
    , right_tick_count(0.0)  {
  (void)_alloc;
    }



   typedef double _Left_tick_count_type;
  _Left_tick_count_type Left_tick_count;

   typedef double _right_tick_count_type;
  _right_tick_count_type right_tick_count;





  typedef boost::shared_ptr< ::joytf::EncoderCount_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joytf::EncoderCount_<ContainerAllocator> const> ConstPtr;

}; // struct EncoderCount_

typedef ::joytf::EncoderCount_<std::allocator<void> > EncoderCount;

typedef boost::shared_ptr< ::joytf::EncoderCount > EncoderCountPtr;
typedef boost::shared_ptr< ::joytf::EncoderCount const> EncoderCountConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::joytf::EncoderCount_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::joytf::EncoderCount_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::joytf::EncoderCount_<ContainerAllocator1> & lhs, const ::joytf::EncoderCount_<ContainerAllocator2> & rhs)
{
  return lhs.Left_tick_count == rhs.Left_tick_count &&
    lhs.right_tick_count == rhs.right_tick_count;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::joytf::EncoderCount_<ContainerAllocator1> & lhs, const ::joytf::EncoderCount_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace joytf

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::joytf::EncoderCount_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joytf::EncoderCount_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::joytf::EncoderCount_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::joytf::EncoderCount_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joytf::EncoderCount_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joytf::EncoderCount_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::joytf::EncoderCount_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7f276c1d9cb78d3dadf8d8c2f65dfdbf";
  }

  static const char* value(const ::joytf::EncoderCount_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7f276c1d9cb78d3dULL;
  static const uint64_t static_value2 = 0xadf8d8c2f65dfdbfULL;
};

template<class ContainerAllocator>
struct DataType< ::joytf::EncoderCount_<ContainerAllocator> >
{
  static const char* value()
  {
    return "joytf/EncoderCount";
  }

  static const char* value(const ::joytf::EncoderCount_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::joytf::EncoderCount_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 Left_tick_count\n"
"float64 right_tick_count\n"
"\n"
;
  }

  static const char* value(const ::joytf::EncoderCount_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::joytf::EncoderCount_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Left_tick_count);
      stream.next(m.right_tick_count);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EncoderCount_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::joytf::EncoderCount_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::joytf::EncoderCount_<ContainerAllocator>& v)
  {
    s << indent << "Left_tick_count: ";
    Printer<double>::stream(s, indent + "  ", v.Left_tick_count);
    s << indent << "right_tick_count: ";
    Printer<double>::stream(s, indent + "  ", v.right_tick_count);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JOYTF_MESSAGE_ENCODERCOUNT_H
